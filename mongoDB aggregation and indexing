Aim: Design and Develop MongoDB Queries using aggregation and indexing with suitable example using MongoDB.
Code and output:
Create the collection Books having the following fields TITLE, DESCRIPTION, BY, URL, TAGS AND LIKES. Implement the following Aggregation and Indexing Queries
1. Find the number of books published by kanetkar.
2. Find books which have minimum likes and maximum likes published by kanetkar.
3. Find the average number of likes of the books published by kanetkar.
4. Find the first and last book published by kanetkar.
5. Create an index on author name. Display the books published by john and check if it uses the index which we have created
/********************************************************************
*****************************************************/


/* INSERT BOOK2*/
mydb> db.Books.insert({title:'book2',description:'book2 by kanetkar',by:'kanetkar',tags:'will smith',liklikes:150})
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("6370bc117db767408eb10e17") }
}

mydb> db.Books.find();
[
  {
    _id: ObjectId("6370bc117db767408eb10e17"),
    title: 'book2',
    description: 'book2 by kanetkar',
    by: 'kanetkar',
    tags: 'will smith',
    likes: 150
  }
]

/*INSERT BOOK1*/

mydb> db.Books.insert({title:'book1',description:'book1 by kanetkar',by:'kanetkar',tags:'williamson',likes:50});
{
  acknowledged: true,
  insertedIds: { '0': ObjectId("6370bc867db767408eb10e18") }
}

/* SHOW BOOKS INSERTED*/

mydb> db.Books.find();
[
  {
    _id: ObjectId("6370bc117db767408eb10e17"),
    title: 'book2',
    description: 'book2 by kanetkar',
    by: 'kanetkar',
    tags: 'will smith',
    likes: 150
  },
  {
    _id: ObjectId("6370bc867db767408eb10e18"),
    title: 'book1',
    description: 'book1 by kanetkar',
    by: 'kanetkar',
    tags: 'williamson',
    likes: 50
  }
]

/* SHOW NUMBER OF BOOKS BY KANETKAR*/

mydb> db.Books.aggregate([{$match:{by:"kanetkar"}},{$group:{_id:"$by",no_of_books:{$sum:1}}}])

[ { _id: 'kanetkar', no_of_books: 2 } ]

/*SHOW MINIMUM NUMBER OF LIKES*/

mydb> db.Books.aggregate([
... {$match:{by:"kanetkar"}},{$group:{_id:"$by",minlikes:{$min:"$likes"}}}])

[ { _id: 'kanetkar', minlikes: 50 } ]

/*SHOW MAXIMUM NUMBER OF LIKES*/

mydb> db.Books.aggregate([{$match:{by:"kanetkar"}},{$group:{_id:"$by",maxlikes:{$max:"$likes"}}}])

[ { _id: 'kanetkar', maxlikes: 150 } ]

/*SHOW AVERAGE NUMBER OF LIKES*/

mydb> db.Books.aggregate([{$match:{by:"kanetkar"}},{$group:{_id:"$by",avglikes:{$avg:"$likes"}}}])

[ { _id: 'kanetkar', avglikes: 100 } ]

/*SHOW FIRST BOOK PUBLISHED BY KANETKAR*/

mydb> db.Books.aggregate([{$match:{by:"kanetkar"}},{$group:{_id:"$by",first_book:{$first:"$title"}}}])

[ { _id: 'kanetkar', first_book: 'book2' } ]

/*SHOW LAST BOOK PUBLISHED BY KANETKAR*/

mydb> db.Books.aggregate([{$match:{by:"kanetkar"}},{$group:{_id:"$by",last_book:{$last:"$title"}}}])

[ { _id: 'kanetkar', last_book: 'book1' } ]

/*CREATE AN INDEX ON AUTHOR NAME*/

mydb> db.Books.ensureIndex({"by":1})

[ 'by_1' ]

mydb> db.Books.createIndex({"by":1})

by_1

mydb> db.Books.find();

[
  {
    _id: ObjectId("6370bc117db767408eb10e17"),
    title: 'book2',
    description: 'book2 by kanetkar',
    by: 'kanetkar',
    tags: 'will smith',
    likes: 150
  },
  {
    _id: ObjectId("6370bc867db767408eb10e18"),
    title: 'book1',
    description: 'book1 by kanetkar',
    by: 'kanetkar',
    tags: 'williamson',
    likes: 50
  }
]
mydb>
